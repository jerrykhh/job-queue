// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: jobQueue_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobQueueService_Start_FullMethodName     = "/pb.JobQueueService/Start"
	JobQueueService_Pause_FullMethodName     = "/pb.JobQueueService/Pause"
	JobQueueService_Create_FullMethodName    = "/pb.JobQueueService/Create"
	JobQueueService_List_FullMethodName      = "/pb.JobQueueService/List"
	JobQueueService_ListJob_FullMethodName   = "/pb.JobQueueService/ListJob"
	JobQueueService_Enqueue_FullMethodName   = "/pb.JobQueueService/Enqueue"
	JobQueueService_Dequeue_FullMethodName   = "/pb.JobQueueService/Dequeue"
	JobQueueService_Remove_FullMethodName    = "/pb.JobQueueService/Remove"
	JobQueueService_RemoveJob_FullMethodName = "/pb.JobQueueService/RemoveJob"
)

// JobQueueServiceClient is the client API for JobQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobQueueServiceClient interface {
	Start(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error)
	Pause(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error)
	Create(ctx context.Context, in *CreateJobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error)
	List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListRepsonse, error)
	ListJob(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*ListJobRepsonse, error)
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*Job, error)
	Dequeue(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	Remove(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error)
	RemoveJob(ctx context.Context, in *RemoveJobRequest, opts ...grpc.CallOption) (*Job, error)
}

type jobQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobQueueServiceClient(cc grpc.ClientConnInterface) JobQueueServiceClient {
	return &jobQueueServiceClient{cc}
}

func (c *jobQueueServiceClient) Start(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error) {
	out := new(JobQueue)
	err := c.cc.Invoke(ctx, JobQueueService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) Pause(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error) {
	out := new(JobQueue)
	err := c.cc.Invoke(ctx, JobQueueService_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) Create(ctx context.Context, in *CreateJobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error) {
	out := new(JobQueue)
	err := c.cc.Invoke(ctx, JobQueueService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListRepsonse, error) {
	out := new(ListRepsonse)
	err := c.cc.Invoke(ctx, JobQueueService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) ListJob(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*ListJobRepsonse, error) {
	out := new(ListJobRepsonse)
	err := c.cc.Invoke(ctx, JobQueueService_ListJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, JobQueueService_Enqueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) Dequeue(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, JobQueueService_Dequeue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) Remove(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueue, error) {
	out := new(JobQueue)
	err := c.cc.Invoke(ctx, JobQueueService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueServiceClient) RemoveJob(ctx context.Context, in *RemoveJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, JobQueueService_RemoveJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobQueueServiceServer is the server API for JobQueueService service.
// All implementations must embed UnimplementedJobQueueServiceServer
// for forward compatibility
type JobQueueServiceServer interface {
	Start(context.Context, *JobQueueRequest) (*JobQueue, error)
	Pause(context.Context, *JobQueueRequest) (*JobQueue, error)
	Create(context.Context, *CreateJobQueueRequest) (*JobQueue, error)
	List(context.Context, *EmptyRequest) (*ListRepsonse, error)
	ListJob(context.Context, *JobQueueRequest) (*ListJobRepsonse, error)
	Enqueue(context.Context, *EnqueueRequest) (*Job, error)
	Dequeue(context.Context, *JobQueueRequest) (*DequeueResponse, error)
	Remove(context.Context, *JobQueueRequest) (*JobQueue, error)
	RemoveJob(context.Context, *RemoveJobRequest) (*Job, error)
	mustEmbedUnimplementedJobQueueServiceServer()
}

// UnimplementedJobQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobQueueServiceServer struct {
}

func (UnimplementedJobQueueServiceServer) Start(context.Context, *JobQueueRequest) (*JobQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobQueueServiceServer) Pause(context.Context, *JobQueueRequest) (*JobQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedJobQueueServiceServer) Create(context.Context, *CreateJobQueueRequest) (*JobQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedJobQueueServiceServer) List(context.Context, *EmptyRequest) (*ListRepsonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobQueueServiceServer) ListJob(context.Context, *JobQueueRequest) (*ListJobRepsonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (UnimplementedJobQueueServiceServer) Enqueue(context.Context, *EnqueueRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedJobQueueServiceServer) Dequeue(context.Context, *JobQueueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedJobQueueServiceServer) Remove(context.Context, *JobQueueRequest) (*JobQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedJobQueueServiceServer) RemoveJob(context.Context, *RemoveJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJob not implemented")
}
func (UnimplementedJobQueueServiceServer) mustEmbedUnimplementedJobQueueServiceServer() {}

// UnsafeJobQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobQueueServiceServer will
// result in compilation errors.
type UnsafeJobQueueServiceServer interface {
	mustEmbedUnimplementedJobQueueServiceServer()
}

func RegisterJobQueueServiceServer(s grpc.ServiceRegistrar, srv JobQueueServiceServer) {
	s.RegisterService(&JobQueueService_ServiceDesc, srv)
}

func _JobQueueService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).Start(ctx, req.(*JobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).Pause(ctx, req.(*JobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).Create(ctx, req.(*CreateJobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).List(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_ListJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).ListJob(ctx, req.(*JobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).Dequeue(ctx, req.(*JobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).Remove(ctx, req.(*JobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueueService_RemoveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServiceServer).RemoveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobQueueService_RemoveJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServiceServer).RemoveJob(ctx, req.(*RemoveJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobQueueService_ServiceDesc is the grpc.ServiceDesc for JobQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.JobQueueService",
	HandlerType: (*JobQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobQueueService_Start_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _JobQueueService_Pause_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _JobQueueService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JobQueueService_List_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _JobQueueService_ListJob_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _JobQueueService_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _JobQueueService_Dequeue_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _JobQueueService_Remove_Handler,
		},
		{
			MethodName: "RemoveJob",
			Handler:    _JobQueueService_RemoveJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jobQueue_service.proto",
}
